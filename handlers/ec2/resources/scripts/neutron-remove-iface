#!/usr/bin/env python
import os
import sys
import logging as LOG
import logging.handlers
import traceback

sys.path.append(os.environ['EC2_DIR'] + "/scripts")

from neutron_common import *
from nova_api_v2_common import *

try:
    sys.path.append(os.environ['EC2_DIR'] + "/scripts")
    from neutron_common import *
    from nova_api_v2_common import *
except:
    print 'Error in neutron-remove-iface: cannot import neutron_common.py'
    sys.exit(1)

try:
    #OPEN THE LOG 
    LOG.basicConfig(level=LOG.DEBUG, filename='/dev/null')

    if not os.path.exists(os.environ['EC2_LOG_DIR']):
        os.makedirs(os.environ['EC2_LOG_DIR'])

    handler = LOG.handlers.RotatingFileHandler(os.environ['EC2_LOG_DIR'] + '/' + os.environ['EC2_LOG_FILE'], backupCount=10, maxBytes=50000000)

    if os.environ['EC2_LOG_LEVEL'].lower() == 'debug':
        handler.setLevel(logging.DEBUG)
    elif os.environ['EC2_LOG_LEVEL'].lower() == 'error':
        handler.setLevel(logging.ERROR)
    elif os.environ['EC2_LOG_LEVEL'].lower() == 'info':
        handler.setLevel(logging.INFO)
    else:
        handler.setLevel(logging.INFO)

    formatter = logging.Formatter('%(asctime)s -- neutron-remove-iface %(process)d %(levelname)s : %(message)s')
    handler.setFormatter(formatter)

    LOG.getLogger('').addHandler(handler)

    LOG.info('Starting Logger')

except Exception as e:
    print 'Error in neutron-remove-iface: Cannot open log file'
    print type(e)
    print e.args
    print e
    sys.exit(1)

#log the environment                     
for i in os.environ:
    LOG.debug(str(i) + ": " + str(os.environ[i]) )

try:
    #DO THE WORK 
    LOG.debug("neutron-remove-iface: " + str(sys.argv))

    network_uuid = Neutron_Network.get_network_uuid(os.environ['NEUTRON_TENANT_ID'], os.environ['NEUTRON_NET_VLAN'], os.environ['NEUTRON_NET_NETWORK'])
    if network_uuid == None:
        LOG.error("neuton-remove-iface: no neutron network found for vlan: " + os.environ['NEUTRON_NET_VLAN'] + ", network: " + os.environ['NEUTRON_NET_NETWORK'])
        sys.exit(1)


    Neutron_Network.remove_iface_from_network(os.environ['NEUTRON_TENANT_ID'],
                                                    network_uuid,
                                                    os.environ['NEUTRON_PORT_UUID'])
    
    print 'OK'

except Exception as e:
    LOG.error("neutron-remove-iface: " + str(type(e)) + " : " + str(e) + "\n" + str(traceback.format_exc()))
    sys.exit(1)

sys.exit(0)

