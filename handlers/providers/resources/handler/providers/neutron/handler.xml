<!DOCTYPE project [
<!ENTITY core SYSTEM "../../common/core.xml">
<!ENTITY paths SYSTEM "../../common/paths.xml">
<!ENTITY drivertasks SYSTEM "../../common/drivertasks.xml">
<!ENTITY bentasks SYSTEM "../ben.no-na.tasks.xml">
]>

<!-- This handler supports configuring Quantum 
as well as flowvisor-emulated and native VLAN provisioning
in a *hybrid* or OF only rack switch /ib -->
<project name="neutron" basedir=".">

	&paths;
	&core;
	&drivertasks;
	&bentasks;

	<!-- Uncomment for handler testing
	<property file="quantum-vlan.test.properties" />
	-->

	<!-- 
		Controller must supply
			unit.openflow.slice.ctrl.url - [optional] User OF Controller URL
			unit.openflow.slice.email - [optional] User OF slice email
			unit.openflow.slice.pass - [optional] User OF slice password
			
			unit.quantum.netname - [mandatory] - dataplane, of or storage
			unit.vlan.tag [mandatory]
			unit.vlan.url [mandatory]
			unit.vlan.qos.rate [mandatory]
			unit.vlan.qos.burst.size [mandatory]
			config.interface.ports [mandatory]
			
		What comes from static properties in quantum-vlan.properties
			flowvisor.url
			flowvisor.user
			flowvisor.passwd
			fvctrl.start.port
			fvctrl.end.port
			fvctrl.host
			fvctrl.type ('floodlight' or 'nox')
			nox.core.exec (if nox)
			floodlight.jar (if floodlight)
			
			router.vlan.type ('hybrid' or 'openflow')
			router.type (cisco6509, g8264 etc)
			router.device (IP address)
			router.user
			router.password
			router.default.prompt (cisco only)
			router.admin.password (cisco only)
		
		Also quantum properties

			# quantum logging 
			provider.log.level=debug
			provider.log.file=handler-vlan.log
			provider.log.dir=/var/log/orca

			# use quantum true/false
			use.neuca.quantum=true

			#tenant that uses orca
			quantum.tenant.id=geni-orca
	-->
	<target name="join" depends="resolve.configuration,ben.load.tasks">
		<tstamp prefix="start">
			<format property="TIME" pattern="MM/dd/yyyy hh:mm" />
		</tstamp>

		<echo message="Neutron Handler: JOIN on ${start.TIME}" />
		<if>
			<isset property="neutron.properties" />
			<then>
				<property file="${neutron.properties}" />
			</then>
			<else>
				<echo message="Credentials properties are not set: neutron.properties absent!" />
			</else>
		</if>
		<if>
			<equals arg1="${emulation}" arg2="true" />
			<then>
				<echo message="running under emulation...exiting" />
				<!-- hairpin -->
				<var name="shirako.save.unit.vlan.url" unset="true" />
				<property name="shirako.save.unit.vlan.url" value="${unit.vlan.url}" />
				<property name="shirako.target.code" value="0" />
			</then>
			<else>
			        <!-- Neutron setup -->
				<echo message="About to create Neutron network, use.neuca.neutron = ${use.neuca.neutron}" />
				<if>
					<equals arg1="${use.neuca.neutron}" arg2="true" />
					<then>
						<echo message="Using Neutron network" />
						<var name="create.network.output" unset="true" />
						<var name="code" unset="true" />
						<var name="message" unset="true" />
						<echo message="PROVIDER_DIR =${provider.dir}" />
						<echo message="PROVIDER_LOG_DIR= ${provider.log.dir}" />
						<echo message="PROVIDER_LOG_FILE= ${provider.log.file}" />
						<echo message="PROVIDER_LOG_LEVEL= ${provider.log.level}" />
						<echo message="QUANTUM_TENANT_ID = ${quantum.tenant.id}" />
						<echo message="QUANTUM_NET_TYPE = ipv4" />
						<echo message="QUANTUM_NET_NETWORK= ${unit.quantum.netname}" />
						<echo message="QUANTUM_NET_VLAN= ${unit.vlan.tag}" />
						<echo message="QUANTUM_MAX_RATE= ${unit.vlan.qos.rate}" />
						<echo message="QUANTUM_BURST_RATE= ${unit.vlan.qos.burst.size}" />
						<exec executable="${provider.scripts}/neutron-create-net" resultproperty="code" outputproperty="create.network.output">
							<env key="PROVIDER_DIR" value="${provider.dir}" />
							<env key="PROVIDER_LOG_DIR" value="${provider.log.dir}" />
							<env key="PROVIDER_LOG_FILE" value="${provider.log.file}" />
							<env key="PROVIDER_LOG_LEVEL" value="${provider.log.level}" />
							<env key="NEUTRON_USERNAME" value="${neutron.username}" />
							<env key="NEUTRON_PASSWORD" value="${neutron.password}" />
							<env key="NEUTRON_AUTH_URL" value="${neutron.authurl}" />
							<env key="NEUTRON_TENANT_ID" value="${neutron.tenant.id}" />
							<env key="NEUTRON_NET_NETWORK" value="${unit.quantum.netname}" /> <!-- typically data or storage -->
 							<env key="NEUTRON_NET_NAME" value="${unit.vlan.tag}" />  <!-- name to use in neutron -->
						</exec>
						<echo message="exit code ${code}, ${create.network.output}" />
						<if>
							<not>
								<equals arg1="${code}" arg2="0" />
							</not>
							<then>
								<echo message="unable to create neutron network: exit code ${code}, ${create.network.output}" />
								<property name="message" value="unable to create instance: exit code ${code}, ${create.network.output}" />
							</then>
							<else>
								<var name="shirako.save.unit.neutron.net.uuid" unset="true" />
								<property name="shirako.save.unit.neutron.net.uuid" value="${create.network.output}" />
							</else>
						</if>
						<echo message="shirako.save.unit.neutron.net.uuid = ${shirako.save.unit.neutron.net.uuid}, create.network.output = ${create.network.output}" />
					</then>
				</if>
				<!-- hairpin the url property so the user sees it too -->
				<property name="shirako.target.code" value="${code}" />
				<property name="shirako.target.code.message" value="${message}" />
			</else>
		</if>

		<!-- hack to make it always report sucess -->
                <var name="shirako.target.code" unset="true" />
		<var name="shirako.target.code.message" unset="true" />
                <property name="shirako.target.code" value="0" />
                <property name="shirako.target.code.message" value="Hacked to always suceed" />


		<echo message="join exit code: ${shirako.target.code} with message: ${shirako.target.code.message}, vlan type ${shirako.save.unit.vlan.type}" />
	</target>

	<!-- 
		Controller must supply
			unit.vlan.tag [mandatory]
			unit.vlan.type [mandatory, set by join to 'native' or 'openflow']
			config.interface.ports [mandatory] if 'native' vlan
			
		What comes from static properties in quantum-vlan.properties
			flowvisor.url
			flowvisor.user
			flowvisor.passwd
			fvctrl.type
			
			router.device
	-->
	<target name="leave" depends="resolve.configuration,ben.load.tasks">
		<tstamp prefix="start">
			<format property="TIME" pattern="MM/dd/yyyy hh:mm" />
		</tstamp>

		<echo message="Neutron Handler: LEAVE on ${start.TIME}" />
		<if>
			<isset property="neutron.properties" />
			<then>
				<property file="${neutron.properties}" />
			</then>
			<else>
				<echo message="Credentials properties are not set!" />
			</else>
		</if>
		<if>
			<equals arg1="${emulation}" arg2="true" />
			<then>
				<echo message="running under emulation...exiting" />
				<property name="shirako.target.code" value="0" />
			</then>
			<else>
			      
				<echo message="About to call neutron-delete-net, use.neuca.neutron = ${use.neuca.neutron}" />
				<if>
					<equals arg1="${use.neuca.neutron}" arg2="true" />
					<then>
						<var name="create.network.output" unset="true" />
						<var name="code" unset="true" />
						<var name="message" unset="true" />
						<exec executable="${provider.scripts}/neutron-delete-net" resultproperty="code" outputproperty="create.network.output">
						        <env key="PROVIDER_DIR" value="${provider.dir}" />
							<env key="PROVIDER_LOG_DIR" value="${provider.log.dir}" />
							<env key="PROVIDER_LOG_FILE" value="${provider.log.file}" />
							<env key="PROVIDER_LOG_LEVEL" value="${provider.log.level}" />
							<env key="NEUTRON_USERNAME" value="${neutron.username}" />
                                                        <env key="NEUTRON_PASSWORD" value="${neutron.password}" />
                                                        <env key="NEUTRON_AUTH_URL" value="${neutron.authurl}" />
                                                        <env key="NEUTRON_TENANT_ID" value="${neutron.tenant.id}" />
                                                        <env key="NEUTRON_NET_NETWORK" value="${unit.quantum.netname}" /> <!-- typically data or storage -->
                                                        <env key="NEUTRON_NET_NAME" value="${unit.vlan.tag}" />  <!-- name to use in neutron -->

						</exec>
						<echo message="exit code ${code}, ${create.network.output}" />
						<if>
							<not>
								<equals arg1="${code}" arg2="0" />
							</not>
							<then>
							        <echo message="unable to delete network: exit code ${code}, ${create.instance.output}" />
								<property name="message" value="unable to create instance: exit code ${code}, ${create.instance.output}" />
							</then>
						</if>
					</then>
				</if>
			</else>
		</if>

               <!-- hack to make it always report sucess -->
                <var name="shirako.save.unit.vlan.url" unset="true" />
                <property name="shirako.save.unit.vlan.url" value="${unit.vlan.url}" />
                <property name="shirako.target.code" value="0" />
                <property name="shirako.target.code.message" value="Hacked to always suceed" />

		<property name="shirako.target.code" value="${code}" />
                <echo message="leave exit code: ${shirako.target.code}" />

	</target>



	<target name="modify" depends="resolve.configuration,ben.load.tasks">
		<echo message="Neutron Handler: MODIFY" />
		<property name="shirako.target.code" value="0" />
	</target>
</project>
